generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int             @id @default(autoincrement())
  username               String          @unique
  email                  String          @unique
  hash                   String
  salt                   String
  friends                User[]          @relation("Friends")
  friendOf               User[]          @relation("Friends")
  outgoingFriendRequests FriendRequest[] @relation("Outgoing Requests")
  incomingFriendRequests FriendRequest[] @relation("Incoming Requests")
  chats                  Chat[]
  messages               Message[]
  profile                Profile?
  pfpurl                 String          @default("https://res.cloudinary.com/dqjizh49f/image/upload/v1733903271/Messaging%20App/genericpfp.jpg")
}

model Profile {
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @id
  memberSince DateTime @default(now())
  name        String
  status      String
  bio         String?
}

model FriendRequest {
  user1   User   @relation("Outgoing Requests", fields: [user1Id], references: [id], onDelete: Cascade)
  user1Id Int
  user2   User   @relation("Incoming Requests", fields: [user2Id], references: [id], onDelete: Cascade)
  user2Id Int
  status  String @default("Pending")

  @@id([user1Id, user2Id])
}

model Chat {
  id           Int       @id @default(autoincrement())
  name         String?
  messages     Message[]
  participants User[]
}

model Message {
  id     Int      @id @default(autoincrement())
  user   User     @relation(fields: [userId], references: [id])
  userId Int
  chat   Chat     @relation(fields: [chatId], references: [id])
  chatId Int
  text   String
  sentAt DateTime @default(now())
}
